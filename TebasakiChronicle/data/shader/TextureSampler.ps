#version 400

//input
in vec2 outTexCoord;
in vec3 outNormal;
in vec4 outPosition;
in vec3 outEyeVector;

//output
out vec4 resultColor;

//uniform
uniform sampler2D sampler;

uniform vec3 directionalDir;
uniform vec4 directionalColor;
uniform float directionalPower;

uniform vec4 specularColor;
uniform float specularLength;
uniform float specularPower;

uniform vec4 ambientColor;
uniform float ambientPower;

//Subroutine



vec4 diffuse(void){
	vec4 result;

	float p = dot(outNormal, -directionalDir);
	p = p * 0.5 + 0.5;
	p = p * p;

	result = directionalPower * directionalColor * p;
	result = clamp(result, 0.0f, 1.0f);
	result += ambientPower * ambientColor;
	result = clamp(result, 0.0f, 1.0f);
	result.a = 1.0f;

	return result;
}
vec4 specular(){
	vec4 result;
	vec3 halfVec = normalize(normalize(-directionalDir) + normalize(outEyeVector));
	float specular = pow(max(0.0, dot(outNormal, halfVec)), specularLength);
	result = specular * specularColor;
	result.a = 0.0f;
	return result;
}


//FragmentShader
void main(void)
{
	resultColor = texture2D(sampler, outTexCoord);
}
